"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç –Ω–∞ aiogram 3
–§—É–Ω–∫—Ü–∏–∏:
- –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∞–Ω—Ç–∏-—Å—Å—ã–ª–∫–∏ —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
- –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ (Warn / Mute / Ban / None)
- –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
- –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã: all / admins
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç-–∞–¥–º–∏–Ω–∞–º–∏ –∏ Owner (ID: 7322925570)
- –í—Å–µ —Ç–µ–∫—Å—Ç—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –≤ —Ç–µ–º–∞—Ö (topics)
- –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
- –ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Owner –∏ –±–æ—Ç-–∞–¥–º–∏–Ω–∞–º
"""

import os
import re
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

load_dotenv()

OWNER_ID = 7322925570  # —Ç–≤–æ–π ID

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

DATA_FILE = "data.json"
DEFAULTS = {
    "banned_words": [],
    "allowed_links": [],
    "link_protection": True,
    "action_words": "mute",
    "mute_seconds_words": 600,
    "action_links": "mute",
    "mute_seconds_links": 600,
    "enabled": True,
    "mode": "admins",  # admins = –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤, all = –Ω–∞–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö
    "bot_admins": []   # —Å–ø–∏—Å–æ–∫ –±–æ—Ç-–∞–¥–º–∏–Ω–æ–≤
}

LINK_REGEX = re.compile(r"(https?://|t\.me/|telegram\.me/|\bwww\.|\.[a-z]{2,3}(?:/|\b))", re.IGNORECASE)

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher()

# -------------------- –†–∞–±–æ—Ç–∞ —Å data.json --------------------
def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

def ensure_chat_settings(chat_id: str) -> Dict[str, Any]:
    if chat_id not in data:
        data[chat_id] = DEFAULTS.copy()
        save_data(data)
    return data[chat_id]

# -------------------- –ü—Ä–æ–≤–µ—Ä–∫–∏ --------------------
def compile_patterns(words: List[str]) -> List[re.Pattern]:
    patterns = []
    for w in words:
        w = w.strip()
        if not w:
            continue
        if " " in w:
            patterns.append(re.compile(re.escape(w), re.IGNORECASE))
        else:
            patterns.append(re.compile(rf"\b{re.escape(w)}\b", re.IGNORECASE))
    return patterns

def contains_banned(text: str, patterns: List[re.Pattern]) -> (bool, str):
    if not text:
        return False, ""
    for patt in patterns:
        m = patt.search(text)
        if m:
            return True, m.group(0)
    return False, ""

def contains_link(text: str, allowed: List[str]) -> (bool, str):
    if not text:
        return False, ""
    m = LINK_REGEX.search(text)
    if not m:
        return False, ""
    for domain in allowed:
        if domain.lower() in text.lower():
            return False, ""
    return True, m.group(0)

async def is_user_admin(chat_id: int, user_id: int) -> bool:
    if user_id == OWNER_ID:
        return True
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.is_chat_admin()
    except Exception:
        return False

def is_bot_admin(chat_id: str, user_id: int) -> bool:
    settings = ensure_chat_settings(chat_id)
    return user_id in settings.get("bot_admins", []) or user_id == OWNER_ID

# -------------------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å --------------------
def admin_panel_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –í–∫–ª/–í—ã–∫–ª", callback_data="toggle_enabled"),
        InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="toggle_mode"),
        InlineKeyboardButton("üî® –ù–∞–∫–∞–∑–∞–Ω–∏—è", callback_data="set_actions"),
        InlineKeyboardButton("üìù –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", callback_data="edit_words"),
        InlineKeyboardButton("üîó –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callback_data="edit_links"),
        InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins")
    )
    return kb

@dp.message(Command(commands=["admin"]))
async def show_admin_panel(message: types.Message):
    chat_id = str(message.chat.id)
    if not is_bot_admin(chat_id, message.from_user.id):
        return await message.reply("**–¢–æ–ª—å–∫–æ Owner –∏ –±–æ—Ç-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å**")
    await message.reply("**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**", reply_markup=admin_panel_keyboard())

# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏–µ–º/—Ä–µ–∂–∏–º–æ–º --------------------
@dp.callback_query(lambda c: c.data == "toggle_enabled")
async def callback_toggle_enabled(query: types.CallbackQuery):
    chat_id = str(query.message.chat.id)
    settings = ensure_chat_settings(chat_id)
    if not is_bot_admin(chat_id, query.from_user.id):
        return await query.answer("–ù–µ—Ç –ø—Ä–∞–≤")
    settings["enabled"] = not settings.get("enabled", True)
    save_data(data)
    status = "‚úÖ –í–∫–ª—é—á—ë–Ω" if settings["enabled"] else "‚õî –í—ã–∫–ª—é—á–µ–Ω"
    await query.message.edit_text(f"**–ë–æ—Ç {status}**", reply_markup=admin_panel_keyboard())
    await query.answer()

@dp.callback_query(lambda c: c.data == "toggle_mode")
async def callback_toggle_mode(query: types.CallbackQuery):
    chat_id = str(query.message.chat.id)
    settings = ensure_chat_settings(chat_id)
    if not is_bot_admin(chat_id, query.from_user.id):
        return await query.answer("–ù–µ—Ç –ø—Ä–∞–≤")
    settings["mode"] = "all" if settings.get("mode", "admins") == "admins" else "admins"
    save_data(data)
    mode_text = "–í—Å–µ" if settings["mode"] == "all" else "–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    await query.message.edit_text(f"**–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω: {mode_text}**", reply_markup=admin_panel_keyboard())
    await query.answer()

# -------------------- –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
@dp.message()
async def mod_message(message: types.Message):
    if message.chat.type not in ("group", "supergroup"):
        return
    chat_id = str(message.chat.id)
    settings = ensure_chat_settings(chat_id)

    if not settings.get("enabled", True):
        return

    # –†–µ–∂–∏–º
    if settings.get("mode", "admins") == "admins":
        if await is_user_admin(message.chat.id, message.from_user.id):
            return

    text = message.text or message.caption or ""
    patterns = compile_patterns(settings.get("banned_words", []))
    is_banned, _ = contains_banned(text, patterns)
    found_link, _ = (False, "")
    if settings.get("link_protection", True):
        found_link, _ = contains_link(text, settings.get("allowed_links", []))

    if not is_banned and not found_link:
        return

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception:
        pass

    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name

    # –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if is_banned:
        action = settings.get("action_words", "mute")
        mute_seconds = settings.get("mute_seconds_words", 600)
        reason = "–∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
    elif found_link:
        action = settings.get("action_links", "mute")
        mute_seconds = settings.get("mute_seconds_links", 600)
        reason = "—Å—Å—ã–ª–∫—É"
    else:
        return

    minutes = mute_seconds // 60
    minutes_text = f"{minutes} –º–∏–Ω—É—Ç" if minutes >= 1 else f"{mute_seconds} —Å–µ–∫—É–Ω–¥"

    if action == "warn":
        await bot.send_message(message.chat.id, f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–ø–∏—Å–∞–ª {reason} –∏ –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.**\n**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!**")
    elif action == "mute":
        until_date = datetime.utcnow() + timedelta(seconds=mute_seconds)
        permissions = ChatPermissions(can_send_messages=False)
        try:
            await bot.restrict_chat_member(message.chat.id, message.from_user.id, permissions=permissions, until_date=until_date)
        except Exception:
            pass
        await bot.send_message(message.chat.id, f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–ø–∏—Å–∞–ª {reason} –∏ –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {minutes_text}.**\n**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!**")
    elif action == "ban":
        try:
            await bot.ban_chat_member(message.chat.id, message.from_user.id)
        except Exception:
            pass
        await bot.send_message(message.chat.id, f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–ø–∏—Å–∞–ª {reason} –∏ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.**\n**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!**")

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
async def main():
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
